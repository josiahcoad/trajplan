        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                        learning_rate=2e-3, ent_coef=0.05,
                        cliprange=0.4, noptepochs=25, lam=0.99)
# 1
# diverged (neg). run 401K

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-4, ent_coef=0.05,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 2
# diverged (neg). run 888K


        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-4, ent_coef=0.05,
                       cliprange=0.2, noptepochs=25, lam=0.99)
# 3
# slow (50%). run 710K

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.95,
                       learning_rate=2e-4, ent_coef=0.05,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 4
# slow (40%) after 200K

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-3, ent_coef=0.01,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 5
# slow (50%) after 500K

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-4, ent_coef=0.01,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 6
# ok (120%) after 2M

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-5, ent_coef=0.05,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 7
# good (120%) after 1M, (135%) after 2M (170% test)

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-5, ent_coef=0.05,
                       cliprange=**0.2**, noptepochs=25, lam=0.99)
# 8 (1)
# from 7
# ok (100%) after 2.5M

        hparams = dict(n_steps=64, nminibatches=64, gamma=**0.99**,
                       learning_rate=2e-5, ent_coef=0.05,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 9 (3)
# from 7
# bad (12%) after 600K

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-5, ent_coef=**0.01**,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 10 (2)
# from 7
# great (1.92 test) after 5M

        hparams = dict(n_steps=64, nminibatches=**16**, gamma=0.90,
                       learning_rate=2e-5, ent_coef=0.01,
                       cliprange=0.4, noptepochs=25, lam=0.99)
# 11 (3)
# from 10
# good (1.9 test) after 5M

        hparams = dict(n_steps=64, nminibatches=64, gamma=0.90,
                       learning_rate=2e-5, ent_coef=0.01,
                       cliprange=**0.2**, noptepochs=25, lam=0.99)
# 12 (1)
# from 10
# good (1.9 test) after 5M

        SAC - base params

# 13 (2)
# ok (.95) after 5 M
# weights = {'fr': 0.3, 'fl': 2}

        weights = {'fr': 0.3, 'fl': 20, 'fk': 2, 'residual': 20}
        depth, width, move_dist, plan_dist = 5, 3, 3, 3
        max_steps=20, obstacle_pct=0
        hparams = #10

# 14 (4)
# good (2) after 1.3M (no learning up to 2M) with no obstacles. Goes near perfectly straight.

        weights = {'fr': 0.3, 'fl': 20, 'fk': 2, 'residual': 20}
        depth, width, move_dist, plan_dist = 5, 3, 3, 3
        max_steps=100, obstacle_pct=.1)
        hparams = #10

# 15 (1)
# same as 14 except with 0.1
# bad (1.13) after 1.3M (no learning up to 2M) with 0.1 obstacles.
# naturally moves to bottom... don't know why
# can kind of plan around obstacles... not great

        weights = {'fr': 0.3, 'fl': 20, 'fk': 2, 'residual': 20}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=100,  obstacle_pct=.10

# 16 (2)
# same as 15 except with 3 view depth instead of 5
# ok (1.13) after 1.3M (no learning up to 2M) with 0.1 obstacles.
# naturally moves to bottom... don't know why
# can plan somewhat around obstacles
# slightly better than 15. best I have yet

        weights = {'fr': 0.3, 'fl': 30, 'fk': 2, 'residual': 20}
        depth, width, move_dist, plan_dist = 5, 3, 3, 3
        max_steps=100, obstacle_pct=.1

# 17 (3)
# same as 15 except with 30 fl
# (.60) after 1.3M (no learning up to 2M) with 0.1 obstacles.
# took signifigantly longer to train... not sure why
# prefers the top
# ironically, most lane changes. worst model.

        weights = {'fr': 0.1, 'fl': 2, 'fk': 1, 'fd': 0.5, 'residual': 2, 'fc': 0.5, 'fa': 0.5, 'fj': 0.5}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.1

# 18 (1)
# same as 15 except 20 max_steps and diff weights
# learned very quickly (10000 steps) then slowly but consistently to 1M
# sucks

        weights = {'fr': 0.1, 'fl': 2, 'fk': 1, 'fd': 0.5, 'residual': 2, 'fc': 0.5, 'fa': 0.5, 'fj': 0.5}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.1

# 19 (3)
# same as 18...
# took much longer to train for some reason

        weights = {'fr': 0.1, 'fl': 5, 'fk': 1, 'fd': 0.5, 'residual': 2, 'fc': 0.5, 'fa': 0.5, 'fj': 0.5}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.1

# 20 (4)
# like 18 but fl=5 instead of 2
# same type of performance

        weights = {'fr': 1, 'fl': 20, 'fk': 10, 'fd': 5, 'residual': 20, 'fc': 5, 'fa': 5, 'fj': 5}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.1

# 21 (1)
# same as 18 but multiply the weights from 18 by 10
# trains to at least 2M

        weights = {'fr': 1, 'fl': 20, 'fk': 10, 'fd': 5, 'residual': 20, 'fc': 5, 'fa': 5, 'fj': 5}
        depth, width, move_dist, plan_dist = 4, 3, 4, 4
        max_steps=20, obstacle_pct=.1,

# 22 (2)
# same as 21 but observe/plan for 4 instead of 3
# trains to at least 2M

        weights = {'fr': 2, 'fl': 40, 'fk': 20, 'fd': 10, 'residual': 40, 'fc': 10, 'fa': 10, 'fj': 10}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.1,

# 23 (3)
# same as 21 but multiply the weights from 21 by 2
# trains to at least 2M

        weights = {'fr': 1, 'fl': 20, 'fk': 10, 'fd': 5, 'residual': 20, 'fc': 5, 'fa': 5, 'fj': 5}
        depth, width, move_dist, plan_dist = 3, 3, 3, 3
        max_steps=20, obstacle_pct=.2,

# 24 (4)
# same as 21 but obstacle_pct=.2
# worst at obstacle avoidance